R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(car) #vif function for collinearity checks
Lade nötiges Paket: carData
> library(languageR) # collinearity checks
Warning message:
Paket ‘languageR’ wurde unter R Version 4.1.2 erstellt 
> library(caret) #confusionMatrix function for accuracy evaluation
Lade nötiges Paket: ggplot2
Lade nötiges Paket: lattice
Warning message:
Paket ‘caret’ wurde unter R Version 4.1.2 erstellt 
> library(ROCR) # precision-recall curve for accuracy evaluation
Warning message:
Paket ‘ROCR’ wurde unter R Version 4.1.2 erstellt 
> 
> # references
> # Field: Field, A., Miles, J., & Field, Z. (2012). Discovering Statistics Using R. SAGE Publications Inc.
> 
> data_folder = "data/"
> dataset = "users_rq3.csv"
> 
> df = read.csv(paste(data_folder, dataset, sep=""), fileEncoding='UTF-8-BOM', sep=",")
> # number of cases
> print(nrow(df))
[1] 10158
> print(nrow(df[complete.cases(df), ]))
[1] 10158
> nrow(df[df$posted_MH == 0, ])
[1] 2312
> nrow(df[df$posted_MH == 1, ])
[1] 7846
> 
> controls <- c("avg_posting_age", "gender", "active_days", "activity")
> liwc <- c("posemo", "anx", "sad", "anger", "i")
> 
> # model with controls only
> model.controls <- glm(posted_MH ~ avg_posting_age + gender + active_days + activity,
+                       data = df, family = binomial(link="logit"))
> summary(model.controls)

Call:
glm(formula = posted_MH ~ avg_posting_age + gender + active_days + 
    activity, family = binomial(link = "logit"), data = df)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.2675   0.4684   0.6120   0.7575   1.1956  

Coefficients:
                  Estimate Std. Error z value Pr(>|z|)    
(Intercept)      1.418e+00  8.432e-02  16.822   <2e-16 ***
avg_posting_age -2.066e-03  2.492e-03  -0.829   0.4072    
gender          -9.381e-01  4.990e-02 -18.801   <2e-16 ***
active_days      2.978e-04  2.923e-05  10.190   <2e-16 ***
activity        -1.285e-02  6.940e-03  -1.851   0.0641 .  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 10897  on 10157  degrees of freedom
Residual deviance: 10454  on 10153  degrees of freedom
AIC: 10464

Number of Fisher Scoring iterations: 4

> 
> # model with controls + LIWC variables
> model.liwc_w_controls <- glm(posted_MH ~ avg_posting_age + gender + active_days + activity
+                              + posemo + anx + anger + sad + i,
+                              data = df, family = binomial(link="logit"))
> summary(model.liwc_w_controls)

Call:
glm(formula = posted_MH ~ avg_posting_age + gender + active_days + 
    activity + posemo + anx + anger + sad + i, family = binomial(link = "logit"), 
    data = df)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.8004   0.4351   0.6026   0.7565   1.2537  

Coefficients:
                  Estimate Std. Error z value Pr(>|z|)    
(Intercept)      5.603e-01  1.748e-01   3.205 0.001352 ** 
avg_posting_age -6.093e-04  2.533e-03  -0.241 0.809871    
gender          -7.908e-01  5.519e-02 -14.328  < 2e-16 ***
active_days      3.327e-04  2.975e-05  11.184  < 2e-16 ***
activity        -8.276e-03  7.065e-03  -1.171 0.241419    
posemo           5.408e-02  1.095e-02   4.939 7.85e-07 ***
anx              6.177e-01  1.513e-01   4.084 4.43e-05 ***
anger           -8.589e-02  4.094e-02  -2.098 0.035927 *  
sad              4.061e-01  1.164e-01   3.490 0.000483 ***
i                1.598e-02  1.655e-02   0.965 0.334350    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 10897  on 10157  degrees of freedom
Residual deviance: 10383  on 10148  degrees of freedom
AIC: 10403

Number of Fisher Scoring iterations: 4

> 
> ## Evaluate model fit
> # compare controls only to LIWC + controls model
> BIC(model.controls)
[1] 10499.68
> BIC(model.liwc_w_controls)
[1] 10475.7
> 
> # important to specify Chisq, otherwise do not get significance results
> anova(model.controls, model.liwc_w_controls, test = "Chisq")
Analysis of Deviance Table

Model 1: posted_MH ~ avg_posting_age + gender + active_days + activity
Model 2: posted_MH ~ avg_posting_age + gender + active_days + activity + 
    posemo + anx + anger + sad + i
  Resid. Df Resid. Dev Df Deviance  Pr(>Chi)    
1     10153      10454                          
2     10148      10383  5   70.115 9.698e-14 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> # function from Field (2012) p. 334
> logisticPseudoR2s <- function(LogModel) {
+   dev <- LogModel$deviance
+   nullDev <- LogModel$null.deviance
+   modelN <- length(LogModel$fitted.values)
+   
+   R.hl <- 1 - dev / nullDev
+   R.cs <- 1 - exp(-(nullDev - dev) / modelN)
+   R.n <- R.cs / (1 - (exp (-(nullDev / modelN))))
+   
+   cat("Pseudo R^2 for logistic regression\n")
+   cat("Hosmer and Lemeshow R2 ", round(R.hl, 3), "\n")
+   cat("Cox and Snell R2 ", round(R.cs, 3), "\n")
+   cat("Nagelkerke R2 ", round(R.n, 3), "\n")
+ }
> logisticPseudoR2s(model.liwc_w_controls)
Pseudo R^2 for logistic regression
Hosmer and Lemeshow R2  0.047 
Cox and Snell R2  0.049 
Nagelkerke R2  0.075 
> 
> ## Confidence intervals for coefficients + odds ratios
> # confidence intervals for the coefficients
> # confint() prodcues profile confidence intervals (https://stats.stackexchange.com/questions/275416/computing-confidence-intervals-for-coefficients-in-logistic-regression)
> # confint.default uses Wald method https://stats.stackexchange.com/questions/5304/why-is-there-a-difference-between-manually-calculating-a-logistic-regression-95/5320#5320
> confint.default(model.liwc_w_controls)
                        2.5 %        97.5 %
(Intercept)      0.2176456688  0.9030216219
avg_posting_age -0.0055733197  0.0043546319
gender          -0.8989871521 -0.6826360047
active_days      0.0002744023  0.0003910152
activity        -0.0221233121  0.0055708412
posemo           0.0326204648  0.0755437923
anx              0.3212867268  0.9142092876
anger           -0.1661408233 -0.0056416344
sad              0.1780383013  0.6341652498
i               -0.0164601376  0.0484143314
> 
> # odds ratio of coefficients and their confidence intervals
> # see Field (2012), p. 335
> exp(model.liwc_w_controls$coefficients)
    (Intercept) avg_posting_age          gender     active_days        activity          posemo             anx           anger             sad 
      1.7512567       0.9993908       0.4534766       1.0003328       0.9917579       1.0555713       1.8547465       0.9176940       1.5009553 
              i 
      1.0161054 
> exp(confint(model.liwc_w_controls))
Waiting for profiling to be done...
                    2.5 %    97.5 %
(Intercept)     1.2434099 2.4677443
avg_posting_age 0.9944546 1.0043782
gender          0.4068929 0.5051837
active_days     1.0002747 1.0003914
activity        0.9781429 1.0057700
posemo          1.0333666 1.0786938
anx             1.3867096 2.5075087
anger           0.8472025 0.9947486
sad             1.1991925 1.8921131
i               0.9837029 1.0496439
> 
> ## Collinearity
> # pairwise correlations
> corrs <- cor(df[, c(liwc, controls)], df[, c(liwc, controls)], use = "pairwise.complete.obs", method = "spearman")
> print(corrs)
                     posemo         anx          sad       anger          i avg_posting_age       gender active_days    activity
posemo           1.00000000 -0.03112649  0.089863949 -0.15935859  0.2537373    -0.062310178 -0.171340105 -0.05218539 -0.11116963
anx             -0.03112649  1.00000000  0.244364551  0.03888768  0.2107769    -0.026026244 -0.273239560 -0.13305492  0.03432144
sad              0.08986395  0.24436455  1.000000000  0.15712941  0.1754393     0.004190192 -0.150134292 -0.03651575  0.06103611
anger           -0.15935859  0.03888768  0.157129415  1.00000000 -0.2232607    -0.042375502  0.243612279  0.05641526  0.26796739
i                0.25373730  0.21077688  0.175439289 -0.22326070  1.0000000    -0.096397996 -0.414672638 -0.14195263 -0.19408974
avg_posting_age -0.06231018 -0.02602624  0.004190192 -0.04237550 -0.0963980     1.000000000 -0.002001858 -0.12861622  0.10659716
gender          -0.17134011 -0.27323956 -0.150134292  0.24361228 -0.4146726    -0.002001858  1.000000000  0.15208864  0.11285172
active_days     -0.05218539 -0.13305492 -0.036515745  0.05641526 -0.1419526    -0.128616225  0.152088644  1.00000000 -0.20519552
activity        -0.11116963  0.03432144  0.061036115  0.26796739 -0.1940897     0.106597157  0.112851723 -0.20519552  1.00000000
> 
> # collinearity of controls + LIWC predictors
> collin.fnc(df[, c(4:12)])$cnumber
[1] 21.78883
Warning messages:
1: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

2: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

3: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

4: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

5: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

6: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

7: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

8: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

9: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

10: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

> 
> # multicollinearity?
> multicollinearity_checks <- function(model){
+   # guidelines for interpreting: Field p. 298
+   # largest VIF should be < 10
+   # mean VIF should be <= 1
+   # Tolerance should be >= 0.2 (0.1)
+   variance_inflation_factor = vif(model)
+   print("variance inflation factor (VIF) (max < 10)")
+   print(variance_inflation_factor)
+   print("mean VIF (should be <= 1)")
+   print(mean(variance_inflation_factor))
+   tolerance = 1 / variance_inflation_factor
+   print("Tolerance (= 1/VIF, min should be > 0.1/0.2)")
+   print(tolerance)
+ }
> 
> multicollinearity_checks(model.liwc_w_controls)
[1] "variance inflation factor (VIF) (max < 10)"
avg_posting_age          gender     active_days        activity          posemo             anx           anger             sad               i 
       1.044335        1.270647        1.104087        1.069544        1.079583        1.117619        1.124876        1.076865        1.314236 
[1] "mean VIF (should be <= 1)"
[1] 1.133532
[1] "Tolerance (= 1/VIF, min should be > 0.1/0.2)"
avg_posting_age          gender     active_days        activity          posemo             anx           anger             sad               i 
      0.9575468       0.7870006       0.9057260       0.9349775       0.9262833       0.8947596       0.8889871       0.9286214       0.7608986 
> 
> ## test for linearity of the logit (Field p. 343 ff)
> # include IVs that are the interaction of the IV and the log of the IV
> for (iv in c(liwc, c("avg_posting_age", "active_days", "activity"))) {
+   df[paste("log", iv, sep = "_")] <- log(df[, iv])*df[, iv]
+ }
> 
> # run controls + LIWC model with log interactions
> model.liwc_w_controls_log_interactions <- glm(posted_MH ~ avg_posting_age + gender + active_days + activity
+                                               + posemo + anx + anger + sad + i
+                                               + log_avg_posting_age + log_active_days + log_activity
+                                               + log_posemo + log_anx + log_anger + log_sad + log_i, 
+                                               data = df, family = binomial(link="logit"))
> summary(model.liwc_w_controls_log_interactions)

Call:
glm(formula = posted_MH ~ avg_posting_age + gender + active_days + 
    activity + posemo + anx + anger + sad + i + log_avg_posting_age + 
    log_active_days + log_activity + log_posemo + log_anx + log_anger + 
    log_sad + log_i, family = binomial(link = "logit"), data = df)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.8937   0.4089   0.5805   0.7568   2.1494  

Coefficients:
                      Estimate Std. Error z value Pr(>|z|)    
(Intercept)         -1.491e+00  5.424e-01  -2.750 0.005968 ** 
avg_posting_age     -4.792e-02  4.802e-02  -0.998 0.318344    
gender              -7.916e-01  5.683e-02 -13.929  < 2e-16 ***
active_days          5.481e-03  6.120e-04   8.955  < 2e-16 ***
activity             3.301e-01  3.671e-02   8.994  < 2e-16 ***
posemo               2.330e-01  1.021e-01   2.281 0.022520 *  
anx                  8.468e-01  1.653e-01   5.122 3.02e-07 ***
anger               -4.698e-01  1.361e-01  -3.453 0.000555 ***
sad                  4.954e-01  1.719e-01   2.882 0.003957 ** 
i                    5.972e-01  1.858e-01   3.215 0.001304 ** 
log_avg_posting_age  1.047e-02  1.074e-02   0.975 0.329714    
log_active_days     -6.225e-04  7.453e-05  -8.352  < 2e-16 ***
log_activity        -1.045e-01  1.210e-02  -8.636  < 2e-16 ***
log_posemo          -6.041e-02  3.381e-02  -1.786 0.074021 .  
log_anx              4.259e-04  3.038e-01   0.001 0.998881    
log_anger            2.455e-01  1.009e-01   2.434 0.014934 *  
log_sad             -1.652e-02  2.438e-01  -0.068 0.945967    
log_i               -2.054e-01  6.729e-02  -3.053 0.002265 ** 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 10816  on 10030  degrees of freedom
Residual deviance: 10128  on 10013  degrees of freedom
  (127 Beobachtungen als fehlend gelöscht)
AIC: 10164

Number of Fisher Scoring iterations: 5

> logisticPseudoR2s(model.liwc_w_controls_log_interactions)
Pseudo R^2 for logistic regression
Hosmer and Lemeshow R2  0.064 
Cox and Snell R2  0.066 
Nagelkerke R2  0.101 
> 
> ## model accuracy
> # confusion matrix
> df$predict_p_posted_MH = predict(model.liwc_w_controls, type = "response")
> df$predict_posted_MH = ifelse(df$predict_p_posted_MH >= 0.5, 1, 0)
> confusionMatrix(as.factor(df$predict_posted_MH), as.factor(df$posted_MH))
Confusion Matrix and Statistics

          Reference
Prediction    0    1
         0    8    5
         1 2304 7841
                                          
               Accuracy : 0.7727          
                 95% CI : (0.7644, 0.7808)
    No Information Rate : 0.7724          
    P-Value [Acc > NIR] : 0.4773          
                                          
                  Kappa : 0.0043          
                                          
 Mcnemar's Test P-Value : <2e-16          
                                          
            Sensitivity : 0.0034602       
            Specificity : 0.9993627       
         Pos Pred Value : 0.6153846       
         Neg Pred Value : 0.7728931       
             Prevalence : 0.2276039       
         Detection Rate : 0.0007876       
   Detection Prevalence : 0.0012798       
      Balanced Accuracy : 0.5014115       
                                          
       'Positive' Class : 0               
                                          
> 
> ## gender-balanced dataset
> dataset = "users_rq3_gender_balanced.csv"
> df = read.csv(paste(data_folder, dataset, sep=""), fileEncoding='UTF-8-BOM', sep=",")
> 
> # number of cases
> print(nrow(df))
[1] 8092
> nrow(df[df$posted_MH == 0, ])
[1] 1792
> nrow(df[df$posted_MH == 1, ])
[1] 6300
> 
> # model with controls only
> model.controls <- glm(posted_MH ~ avg_posting_age + gender + active_days + activity,
+                       data = df, family = binomial(link="logit"))
> summary(model.controls)

Call:
glm(formula = posted_MH ~ avg_posting_age + gender + active_days + 
    activity, family = binomial(link = "logit"), data = df)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.1516   0.5529   0.6673   0.7513   1.0148  

Coefficients:
                  Estimate Std. Error z value Pr(>|z|)    
(Intercept)      1.011e+00  9.363e-02  10.795   <2e-16 ***
avg_posting_age -2.117e-03  2.795e-03  -0.757   0.4489    
gender          -8.164e-02  5.495e-02  -1.486   0.1374    
active_days      3.063e-04  3.284e-05   9.329   <2e-16 ***
activity        -1.310e-02  7.520e-03  -1.743   0.0814 .  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 8557.1  on 8091  degrees of freedom
Residual deviance: 8454.5  on 8087  degrees of freedom
AIC: 8464.5

Number of Fisher Scoring iterations: 4

> 
> # model with controls + LIWC variables
> model.liwc_w_controls <- glm(posted_MH ~ avg_posting_age + gender + active_days + activity
+                              + posemo + anx + anger + sad + i,
+                              data = df, family = binomial(link="logit"))
> summary(model.liwc_w_controls)

Call:
glm(formula = posted_MH ~ avg_posting_age + gender + active_days + 
    activity + posemo + anx + anger + sad + i, family = binomial(link = "logit"), 
    data = df)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.6346   0.5195   0.6524   0.7481   1.1528  

Coefficients:
                  Estimate Std. Error z value Pr(>|z|)    
(Intercept)      1.507e-01  1.930e-01   0.781  0.43472    
avg_posting_age -4.986e-04  2.837e-03  -0.176  0.86046    
gender           5.559e-02  6.097e-02   0.912  0.36189    
active_days      3.391e-04  3.338e-05  10.158  < 2e-16 ***
activity        -9.046e-03  7.676e-03  -1.178  0.23862    
posemo           6.059e-02  1.216e-02   4.982  6.3e-07 ***
anx              5.124e-01  1.615e-01   3.173  0.00151 ** 
anger           -7.029e-02  4.525e-02  -1.553  0.12036    
sad              3.781e-01  1.246e-01   3.035  0.00241 ** 
i                1.536e-02  1.829e-02   0.840  0.40112    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 8557.1  on 8091  degrees of freedom
Residual deviance: 8398.2  on 8082  degrees of freedom
AIC: 8418.2

Number of Fisher Scoring iterations: 4

> 
> ## Model fit
> BIC(model.controls)
[1] 8499.511
> BIC(model.liwc_w_controls)
[1] 8488.169
> anova(model.controls, model.liwc_w_controls, test = "Chisq")
Analysis of Deviance Table

Model 1: posted_MH ~ avg_posting_age + gender + active_days + activity
Model 2: posted_MH ~ avg_posting_age + gender + active_days + activity + 
    posemo + anx + anger + sad + i
  Resid. Df Resid. Dev Df Deviance Pr(>Chi)    
1      8087     8454.5                         
2      8082     8398.2  5   56.336 6.93e-11 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> logisticPseudoR2s(model.liwc_w_controls)
Pseudo R^2 for logistic regression
Hosmer and Lemeshow R2  0.019 
Cox and Snell R2  0.019 
Nagelkerke R2  0.03 
> 
> ## Confidence intervals
> confint.default(model.liwc_w_controls)
                        2.5 %       97.5 %
(Intercept)     -0.2274830966 0.5289608904
avg_posting_age -0.0060583025 0.0050610457
gender          -0.0639056855 0.1750838183
active_days      0.0002736892 0.0004045486
activity        -0.0240905281 0.0059990605
posemo           0.0367507938 0.0844248552
anx              0.1958913398 0.8289288723
anger           -0.1589899910 0.0184059700
sad              0.1339160713 0.6222913552
i               -0.0204890662 0.0511996835
> exp(model.liwc_w_controls$coefficients)
    (Intercept) avg_posting_age          gender     active_days        activity          posemo             anx           anger             sad 
      1.1626930       0.9995015       1.0571632       1.0003392       0.9909951       1.0624609       1.6693096       0.9321216       1.4595143 
              i 
      1.0154738 
> exp(confint(model.liwc_w_controls))
Waiting for profiling to be done...
                    2.5 %   97.5 %
(Intercept)     0.7965546 1.697382
avg_posting_age 0.9939793 1.005095
gender          0.9381182 1.191410
active_days     1.0002741 1.000405
activity        0.9762831 1.006385
posemo          1.0376886 1.088368
anx             1.2255750 2.305993
anger           0.8534100 1.019146
sad             1.1486112 1.871684
i               0.9797586 1.052587
> 
> ## Model accuracy
> df$predict_p_posted_MH = predict(model.liwc_w_controls, type = "response")
> df$predict_posted_MH = ifelse(df$predict_p_posted_MH >= 0.5, 1, 0)
> confusionMatrix(as.factor(df$predict_posted_MH), as.factor(df$posted_MH))
Confusion Matrix and Statistics

          Reference
Prediction    0    1
         0    1    0
         1 1791 6300
                                          
               Accuracy : 0.7787          
                 95% CI : (0.7695, 0.7877)
    No Information Rate : 0.7785          
    P-Value [Acc > NIR] : 0.4957          
                                          
                  Kappa : 9e-04           
                                          
 Mcnemar's Test P-Value : <2e-16          
                                          
            Sensitivity : 0.0005580       
            Specificity : 1.0000000       
         Pos Pred Value : 1.0000000       
         Neg Pred Value : 0.7786429       
             Prevalence : 0.2214533       
         Detection Rate : 0.0001236       
   Detection Prevalence : 0.0001236       
      Balanced Accuracy : 0.5002790       
                                          
       'Positive' Class : 0               
                                          