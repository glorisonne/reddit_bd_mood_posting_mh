R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(car) #vif function for collinearity checks
Lade nötiges Paket: carData
> library(languageR) # collinearity checks
Warning message:
Paket ‘languageR’ wurde unter R Version 4.1.2 erstellt 
> library(caret) #confusionMatrix function for accuracy evaluation
Lade nötiges Paket: ggplot2
Lade nötiges Paket: lattice
Warning message:
Paket ‘caret’ wurde unter R Version 4.1.2 erstellt 
> library(ROCR) # precision-recall curve for accuracy evaluation
Warning message:
Paket ‘ROCR’ wurde unter R Version 4.1.2 erstellt 
> 
> # references
> # Field: Field, A., Miles, J., & Field, Z. (2012). Discovering Statistics Using R. SAGE Publications Inc.
> 
> data_folder = "data/"
> dataset = "users_rq3-new.csv"
> 
> df = read.csv(paste(data_folder, dataset, sep=""), fileEncoding='UTF-8-BOM', sep=",")
> # number of cases
> print(nrow(df))
[1] 10309
> print(nrow(df[complete.cases(df), ]))
[1] 10309
> nrow(df[df$posted_MH == 0, ])
[1] 2463
> nrow(df[df$posted_MH == 1, ])
[1] 7846
> 
> controls <- c("avg_posting_age", "gender", "active_days", "activity")
> liwc <- c("posemo", "anx", "sad", "anger", "i")
> 
> # model with controls only
> model.controls <- glm(posted_MH ~ avg_posting_age + gender + active_days + activity,
+                       data = df, family = binomial(link="logit"))
> summary(model.controls)

Call:
glm(formula = posted_MH ~ avg_posting_age + gender + active_days + 
    activity, family = binomial(link = "logit"), data = df)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.2196   0.4768   0.6242   0.7850   1.2454  

Coefficients:
                  Estimate Std. Error z value Pr(>|z|)    
(Intercept)      1.427e+00  8.230e-02  17.339   <2e-16 ***
avg_posting_age -3.504e-03  2.426e-03  -1.444   0.1487    
gender          -9.385e-01  4.873e-02 -19.259   <2e-16 ***
active_days      2.757e-04  2.835e-05   9.724   <2e-16 ***
activity        -1.500e-02  6.854e-03  -2.188   0.0287 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 11336  on 10308  degrees of freedom
Residual deviance: 10878  on 10304  degrees of freedom
AIC: 10888

Number of Fisher Scoring iterations: 4

> 
> # model with controls + LIWC variables
> model.liwc_w_controls <- glm(posted_MH ~ avg_posting_age + gender + active_days + activity
+                              + posemo + anx + anger + sad + i,
+                              data = df, family = binomial(link="logit"))
> summary(model.liwc_w_controls)

Call:
glm(formula = posted_MH ~ avg_posting_age + gender + active_days + 
    activity + posemo + anx + anger + sad + i, family = binomial(link = "logit"), 
    data = df)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.3878   0.4206   0.6100   0.7755   1.6608  

Coefficients:
                  Estimate Std. Error z value Pr(>|z|)    
(Intercept)      5.726e-01  1.909e-01   2.999  0.00271 ** 
avg_posting_age -1.806e-03  2.480e-03  -0.728  0.46647    
gender          -7.452e-01  5.350e-02 -13.930  < 2e-16 ***
active_days      3.237e-04  2.906e-05  11.138  < 2e-16 ***
activity        -4.047e-03  7.000e-03  -0.578  0.56313    
posemo           4.154e-02  2.890e-02   1.437  0.15065    
anx              7.471e-01  1.558e-01   4.795 1.63e-06 ***
anger           -2.955e-01  5.738e-02  -5.150 2.61e-07 ***
sad              7.206e-01  1.439e-01   5.007 5.53e-07 ***
i                2.717e-02  1.469e-02   1.849  0.06439 .  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 11336  on 10308  degrees of freedom
Residual deviance: 10775  on 10299  degrees of freedom
AIC: 10795

Number of Fisher Scoring iterations: 4

> 
> ## Evaluate model fit
> # compare controls only to LIWC + controls model
> BIC(model.controls)
[1] 10923.95
> BIC(model.liwc_w_controls)
[1] 10867.49
> 
> # important to specify Chisq, otherwise do not get significance results
> anova(model.controls, model.liwc_w_controls, test = "Chisq")
Analysis of Deviance Table

Model 1: posted_MH ~ avg_posting_age + gender + active_days + activity
Model 2: posted_MH ~ avg_posting_age + gender + active_days + activity + 
    posemo + anx + anger + sad + i
  Resid. Df Resid. Dev Df Deviance  Pr(>Chi)    
1     10304      10878                          
2     10299      10775  5   102.67 < 2.2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> # function from Field (2012) p. 334
> logisticPseudoR2s <- function(LogModel) {
+   dev <- LogModel$deviance
+   nullDev <- LogModel$null.deviance
+   modelN <- length(LogModel$fitted.values)
+   
+   R.hl <- 1 - dev / nullDev
+   R.cs <- 1 - exp(-(nullDev - dev) / modelN)
+   R.n <- R.cs / (1 - (exp (-(nullDev / modelN))))
+   
+   cat("Pseudo R^2 for logistic regression\n")
+   cat("Hosmer and Lemeshow R2 ", round(R.hl, 3), "\n")
+   cat("Cox and Snell R2 ", round(R.cs, 3), "\n")
+   cat("Nagelkerke R2 ", round(R.n, 3), "\n")
+ }
> logisticPseudoR2s(model.liwc_w_controls)
Pseudo R^2 for logistic regression
Hosmer and Lemeshow R2  0.05 
Cox and Snell R2  0.053 
Nagelkerke R2  0.079 
> 
> ## Confidence intervals for coefficients + odds ratios
> # confidence intervals for the coefficients
> # confint() prodcues profile confidence intervals (https://stats.stackexchange.com/questions/275416/computing-confidence-intervals-for-coefficients-in-logistic-regression)
> # confint.default uses Wald method https://stats.stackexchange.com/questions/5304/why-is-there-a-difference-between-manually-calculating-a-logistic-regression-95/5320#5320
> confint.default(model.liwc_w_controls)
                       2.5 %        97.5 %
(Intercept)      0.198409887  0.9468370459
avg_posting_age -0.006666221  0.0030544536
gender          -0.850085557 -0.6403703672
active_days      0.000266746  0.0003806693
activity        -0.017767061  0.0096723117
posemo          -0.015109477  0.0981940821
anx              0.441705332  1.0525369405
anger           -0.407950877 -0.1830354846
sad              0.438535113  1.0026774977
i               -0.001623334  0.0559560418
> 
> # odds ratio of coefficients and their confidence intervals
> # see Field (2012), p. 335
> exp(model.liwc_w_controls$coefficients)
    (Intercept) avg_posting_age          gender     active_days        activity          posemo             anx           anger             sad 
      1.7729121       0.9981957       0.4746261       1.0003238       0.9959608       1.0424173       2.1109142       0.7441645       2.0556792 
              i 
      1.0275387 
> exp(confint(model.liwc_w_controls))
Waiting for profiling to be done...
                    2.5 %    97.5 %
(Intercept)     1.2196617 2.5781804
avg_posting_age 0.9933657 1.0030705
gender          0.4273004 0.5270110
active_days     1.0002670 1.0003810
activity        0.9824563 1.0099602
posemo          0.9852282 1.1034471
anx             1.5591865 2.8720896
anger           0.6650348 0.8328231
sad             1.5548804 2.7333606
i               0.9983914 1.0575719
> 
> ## Collinearity
> # pairwise correlations
> corrs <- cor(df[, c(liwc, controls)], df[, c(liwc, controls)], use = "pairwise.complete.obs", method = "spearman")
> print(corrs)
                     posemo         anx          sad       anger          i avg_posting_age       gender active_days    activity
posemo           1.00000000  0.08429731  0.121198328 -0.14007745  0.1904633    -0.111983123 -0.113598003 -0.02637008 -0.12135196
anx              0.08429731  1.00000000  0.363097064  0.06470418  0.2780705    -0.037812685 -0.333114644 -0.18300415 -0.04370758
sad              0.12119833  0.36309706  1.000000000  0.14246540  0.2525561     0.000767083 -0.226653570 -0.12296992 -0.02102945
anger           -0.14007745  0.06470418  0.142465400  1.00000000 -0.1992319    -0.028821211  0.189480072  0.02008455  0.28748292
i                0.19046327  0.27807046  0.252556074 -0.19923187  1.0000000    -0.100927039 -0.395168572 -0.15976764 -0.21059489
avg_posting_age -0.11198312 -0.03781269  0.000767083 -0.02882121 -0.1009270     1.000000000  0.001667206 -0.12754151  0.10928053
gender          -0.11359800 -0.33311464 -0.226653570  0.18948007 -0.3951686     0.001667206  1.000000000  0.15277304  0.11462496
active_days     -0.02637008 -0.18300415 -0.122969923  0.02008455 -0.1597676    -0.127541512  0.152773044  1.00000000 -0.20454326
activity        -0.12135196 -0.04370758 -0.021029455  0.28748292 -0.2105949     0.109280526  0.114624956 -0.20454326  1.00000000
> 
> # collinearity of controls + LIWC predictors
> collin.fnc(df[, c(4:12)])$cnumber
[1] 24.64603
Warning messages:
1: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

2: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

3: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

4: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

5: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

6: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

7: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

8: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

9: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

10: In vec/sqrt(t(vec) %*% vec) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

> 
> # multicollinearity?
> multicollinearity_checks <- function(model){
+   # guidelines for interpreting: Field p. 298
+   # largest VIF should be < 10
+   # mean VIF should be <= 1
+   # Tolerance should be >= 0.2 (0.1)
+   variance_inflation_factor = vif(model)
+   print("variance inflation factor (VIF) (max < 10)")
+   print(variance_inflation_factor)
+   print("mean VIF (should be <= 1)")
+   print(mean(variance_inflation_factor))
+   tolerance = 1 / variance_inflation_factor
+   print("Tolerance (= 1/VIF, min should be > 0.1/0.2)")
+   print(tolerance)
+ }
> 
> multicollinearity_checks(model.liwc_w_controls)
[1] "variance inflation factor (VIF) (max < 10)"
avg_posting_age          gender     active_days        activity          posemo             anx           anger             sad               i 
       1.054777        1.248474        1.113972        1.083087        1.064128        1.200425        1.141611        1.158308        1.326590 
[1] "mean VIF (should be <= 1)"
[1] 1.154597
[1] "Tolerance (= 1/VIF, min should be > 0.1/0.2)"
avg_posting_age          gender     active_days        activity          posemo             anx           anger             sad               i 
      0.9480676       0.8009781       0.8976884       0.9232873       0.9397370       0.8330380       0.8759554       0.8633281       0.7538126 
> 
> ## test for linearity of the logit (Field p. 343 ff)
> # include IVs that are the interaction of the IV and the log of the IV
> for (iv in c(liwc, c("avg_posting_age", "active_days", "activity"))) {
+   df[paste("log", iv, sep = "_")] <- log(df[, iv])*df[, iv]
+ }
> 
> # run controls + LIWC model with log interactions
> model.liwc_w_controls_log_interactions <- glm(posted_MH ~ avg_posting_age + gender + active_days + activity
+                                               + posemo + anx + anger + sad + i
+                                               + log_avg_posting_age + log_active_days + log_activity
+                                               + log_posemo + log_anx + log_anger + log_sad + log_i, 
+                                               data = df, family = binomial(link="logit"))
> summary(model.liwc_w_controls_log_interactions)

Call:
glm(formula = posted_MH ~ avg_posting_age + gender + active_days + 
    activity + posemo + anx + anger + sad + i + log_avg_posting_age + 
    log_active_days + log_activity + log_posemo + log_anx + log_anger + 
    log_sad + log_i, family = binomial(link = "logit"), data = df)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.4263   0.3785   0.5884   0.7733   2.0861  

Coefficients:
                      Estimate Std. Error z value Pr(>|z|)    
(Intercept)         -1.396e+00  6.918e-01  -2.017   0.0437 *  
avg_posting_age     -6.315e-02  4.710e-02  -1.341   0.1800    
gender              -7.235e-01  5.547e-02 -13.043  < 2e-16 ***
active_days          5.619e-03  6.035e-04   9.311  < 2e-16 ***
activity             3.428e-01  3.618e-02   9.476  < 2e-16 ***
posemo              -6.327e-02  3.393e-01  -0.186   0.8521    
anx                  1.225e+00  1.725e-01   7.103 1.22e-12 ***
anger               -6.492e-01  1.580e-01  -4.110 3.95e-05 ***
sad                  9.057e-01  1.950e-01   4.644 3.42e-06 ***
i                    6.968e-01  1.636e-01   4.260 2.05e-05 ***
log_avg_posting_age  1.364e-02  1.052e-02   1.297   0.1948    
log_active_days     -6.378e-04  7.344e-05  -8.685  < 2e-16 ***
log_activity        -1.068e-01  1.198e-02  -8.918  < 2e-16 ***
log_posemo           4.095e-02  1.440e-01   0.284   0.7761    
log_anx             -4.861e-01  3.767e-01  -1.291   0.1969    
log_anger            2.260e-01  1.454e-01   1.554   0.1201    
log_sad              8.086e-02  3.748e-01   0.216   0.8292    
log_i               -2.340e-01  5.841e-02  -4.007 6.15e-05 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 11186  on 10102  degrees of freedom
Residual deviance: 10427  on 10085  degrees of freedom
  (206 Beobachtungen als fehlend gelöscht)
AIC: 10463

Number of Fisher Scoring iterations: 5

> logisticPseudoR2s(model.liwc_w_controls_log_interactions)
Pseudo R^2 for logistic regression
Hosmer and Lemeshow R2  0.068 
Cox and Snell R2  0.072 
Nagelkerke R2  0.108 
> 
> ## model accuracy
> # confusion matrix
> df$predict_p_posted_MH = predict(model.liwc_w_controls, type = "response")
> df$predict_posted_MH = ifelse(df$predict_p_posted_MH >= 0.5, 1, 0)
> confusionMatrix(as.factor(df$predict_posted_MH), as.factor(df$posted_MH))
Confusion Matrix and Statistics

          Reference
Prediction    0    1
         0   44   20
         1 2419 7826
                                          
               Accuracy : 0.7634          
                 95% CI : (0.7551, 0.7716)
    No Information Rate : 0.7611          
    P-Value [Acc > NIR] : 0.2941          
                                          
                  Kappa : 0.023           
                                          
 Mcnemar's Test P-Value : <2e-16          
                                          
            Sensitivity : 0.017864        
            Specificity : 0.997451        
         Pos Pred Value : 0.687500        
         Neg Pred Value : 0.763885        
             Prevalence : 0.238917        
         Detection Rate : 0.004268        
   Detection Prevalence : 0.006208        
      Balanced Accuracy : 0.507658        
                                          
       'Positive' Class : 0               
                                          
> 
> # precision-recall curve
> # ROC curve https://stats.stackexchange.com/questions/6067/does-an-unbalanced-sample-matter-when-doing-logistic-regression
> pred <- prediction(df$predict_p_posted_MH, df$posted_MH)
> perf <- performance(pred, "prec", "rec")
> plot(perf, colorize=TRUE)

> ## gender-balanced dataset
> dataset = "users_rq3_gender_balanced.csv"
> df = read.csv(paste(data_folder, dataset, sep=""), fileEncoding='UTF-8-BOM', sep=",")
> 
> # number of cases
> print(nrow(df))
[1] 8120
> nrow(df[df$posted_MH == 0, ])
[1] 1820
> nrow(df[df$posted_MH == 1, ])
[1] 6300
> 
> # model with controls only
> model.controls <- glm(posted_MH ~ avg_posting_age + gender + active_days + activity,
+                       data = df, family = binomial(link="logit"))
> summary(model.controls)

Call:
glm(formula = posted_MH ~ avg_posting_age + gender + active_days + 
    activity, family = binomial(link = "logit"), data = df)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.1835   0.5404   0.6664   0.7592   1.0529  

Coefficients:
                  Estimate Std. Error z value Pr(>|z|)    
(Intercept)      9.286e-01  9.335e-02   9.947   <2e-16 ***
avg_posting_age -6.847e-04  2.800e-03  -0.244   0.8068    
gender          -8.842e-02  5.465e-02  -1.618   0.1057    
active_days      3.349e-04  3.286e-05  10.192   <2e-16 ***
activity        -1.461e-02  7.460e-03  -1.958   0.0502 .  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 8641.2  on 8119  degrees of freedom
Residual deviance: 8517.0  on 8115  degrees of freedom
AIC: 8527

Number of Fisher Scoring iterations: 4

> 
> # model with controls + LIWC variables
> model.liwc_w_controls <- glm(posted_MH ~ avg_posting_age + gender + active_days + activity
+                              + posemo + anx + anger + sad + i,
+                              data = df, family = binomial(link="logit"))
> summary(model.liwc_w_controls)

Call:
glm(formula = posted_MH ~ avg_posting_age + gender + active_days + 
    activity + posemo + anx + anger + sad + i, family = binomial(link = "logit"), 
    data = df)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-4.5095   0.1296   0.3279   0.5200   4.4446  

Coefficients:
                  Estimate Std. Error z value Pr(>|z|)    
(Intercept)      5.829e+00  2.792e-01  20.880  < 2e-16 ***
avg_posting_age -1.487e-02  3.618e-03  -4.109 3.98e-05 ***
gender           2.955e-01  7.995e-02   3.696 0.000219 ***
active_days      2.819e-04  4.224e-05   6.674 2.48e-11 ***
activity        -2.799e-03  1.100e-02  -0.254 0.799222    
posemo          -1.340e+00  3.774e-02 -35.505  < 2e-16 ***
anx              1.442e+00  2.343e-01   6.152 7.67e-10 ***
anger           -1.428e+00  7.658e-02 -18.646  < 2e-16 ***
sad              5.689e-01  1.963e-01   2.898 0.003756 ** 
i                2.839e-01  2.309e-02  12.294  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 8641.2  on 8119  degrees of freedom
Residual deviance: 5350.3  on 8110  degrees of freedom
AIC: 5370.3

Number of Fisher Scoring iterations: 6

> 
> ## Model fit
> BIC(model.controls)
[1] 8562.052
> BIC(model.liwc_w_controls)
[1] 5440.352
> anova(model.controls, model.liwc_w_controls, test = "Chisq")
Analysis of Deviance Table

Model 1: posted_MH ~ avg_posting_age + gender + active_days + activity
Model 2: posted_MH ~ avg_posting_age + gender + active_days + activity + 
    posemo + anx + anger + sad + i
  Resid. Df Resid. Dev Df Deviance  Pr(>Chi)    
1      8115     8517.0                          
2      8110     5350.3  5   3166.7 < 2.2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> logisticPseudoR2s(model.liwc_w_controls)
Pseudo R^2 for logistic regression
Hosmer and Lemeshow R2  0.381 
Cox and Snell R2  0.333 
Nagelkerke R2  0.509 
> 
> ## Confidence intervals
> confint.default(model.liwc_w_controls)
                        2.5 %        97.5 %
(Intercept)      5.2820432131  6.3763788274
avg_posting_age -0.0219565517 -0.0077743200
gender           0.1388046700  0.4522218861
active_days      0.0001991347  0.0003647079
activity        -0.0243643739  0.0187670044
posemo          -1.4140847318 -1.2661313683
anx              0.9822715512  1.9008615406
anger           -1.5779957802 -1.2778083317
sad              0.1841319789  0.9536576522
i                0.2386160002  0.3291297738
> exp(model.liwc_w_controls$coefficients)
    (Intercept) avg_posting_age          gender     active_days        activity          posemo             anx           anger             sad 
    340.0902489       0.9852445       1.3438159       1.0002820       0.9972052       0.2618174       4.2273129       0.2398115       1.7663139 
              i 
      1.3282641 
> exp(confint(model.liwc_w_controls))
Waiting for profiling to be done...
                      2.5 %      97.5 %
(Intercept)     197.6220077 590.4422939
avg_posting_age   0.9782956   0.9922722
gender            1.1491004   1.5721731
active_days       1.0001996   1.0003652
activity          0.9762494   1.0191750
posemo            0.2428806   0.2816150
anx               2.6817092   6.7213841
anger             0.2061370   0.2783250
sad               1.2065651   2.6024836
i                 1.2697661   1.3900813
> 
> ## Model accuracy
> df$predict_p_posted_MH = predict(model.liwc_w_controls, type = "response")
> df$predict_posted_MH = ifelse(df$predict_p_posted_MH >= 0.5, 1, 0)
> confusionMatrix(as.factor(df$predict_posted_MH), as.factor(df$posted_MH))
Confusion Matrix and Statistics

          Reference
Prediction    0    1
         0 1008  206
         1  812 6094
                                          
               Accuracy : 0.8746          
                 95% CI : (0.8672, 0.8818)
    No Information Rate : 0.7759          
    P-Value [Acc > NIR] : < 2.2e-16       
                                          
                  Kappa : 0.5911          
                                          
 Mcnemar's Test P-Value : < 2.2e-16       
                                          
            Sensitivity : 0.5538          
            Specificity : 0.9673          
         Pos Pred Value : 0.8303          
         Neg Pred Value : 0.8824          
             Prevalence : 0.2241          
         Detection Rate : 0.1241          
   Detection Prevalence : 0.1495          
      Balanced Accuracy : 0.7606          
                                          
       'Positive' Class : 0 